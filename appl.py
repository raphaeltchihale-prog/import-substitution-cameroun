import streamlit as st from streamlit_option_menu import option_menu import pandas as pd import numpy as np import plotly.express as px import time # ---------------- CONFIGURATION ---------------- # st.set_page_config( page_title="🇨🇲 Import-Substitution Cameroun", page_icon="🌍", layout="wide", initial_sidebar_state="expanded" ) # ----------------- STYLE CSS ------------------- # st.markdown(""" <style> .main {background-color: #F9F9F9;} .stMetric { background: linear-gradient(90deg, #00C9FF 0%, #92FE9D 100%); padding: 15px; border-radius: 15px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); } .stButton>button { background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px; font-size: 16px; padding: 8px 20px; } </style> """, unsafe_allow_html=True) # ----------------- MENU HORIZONTAL ---------------- # selected = option_menu( menu_title=None, options=["Accueil", "Connexion", "Données", "Taux", "Analyse", "Rapports", "Tableau de bord", "À propos"], icons=["house", "lock", "bar-chart", "file-earmark-text", "graph-up", "file-text", "grid-3x3-gap", "info-circle"], menu_icon="cast", default_index=0, orientation="horizontal", styles={ "container": {"padding": "5px", "background-color": "#f8f9fa"}, "icon": {"color": "#2E86C1", "font-size": "20px"}, "nav-link": {"font-size": "18px", "text-align": "center", "margin": "0px", "--hover-color": "#eee"}, "nav-link-selected": {"background-color": "#2E86C1", "color": "white"}, }, ) # ----------------- PAGES ---------------- # # -------- ACCUEIL -------- # # -------- ACCUEIL -------- # if selected == "Accueil": st.markdown("<h1 style='text-align:center; color:#27AE60;'>🇨🇲 Outil d'aide à la décision - Import-substitution</h1>", unsafe_allow_html=True) #st.image("C:/Users/UltraBook 3.1/Desktop/logo enspy minepat et cameroun/enspy-logo.png", width=200) #st.image("C:/Users/UltraBook 3.1/Desktop/logo enspy minepat et cameroun/minepat-logo.png", width=200) st.image("C:/Users/UltraBook 3.1/Desktop/logo enspy minepat et cameroun/cameroun-seal.png", width=200) st.write("Bienvenue dans l’outil interactif pour mesurer la dynamique de l’import-substitution au Cameroun 🇨🇲.") # Animation chargement with st.spinner("Chargement des données..."): time.sleep(2) st.success("✅ Prêt à explorer !") # Métriques interactives col1, col2, col3 = st.columns(3) col1.metric("Production Locale", "120K T", "+12%") col2.metric("Importations", "80K T", "-8%") col3.metric("Taux Substitution", "60%", "+5%") # -------- CONNEXION -------- # elif selected == "Connexion": st.subheader("🔑 Connexion") username = st.text_input("Nom d'utilisateur") password = st.text_input("Mot de passe", type="password") if st.button("Se connecter"): if username == "RAPHAEL" and password == "1234": st.success("Connexion réussie ✅") else: st.error("Nom d'utilisateur ou mot de passe incorrect.") # -------- DONNÉES -------- # # ----------------- CHARGEMENT GLOBAL DES DONNÉES ---------------- # st.session_state.setdefault("df", None) # Initialise df dans session_state # Page "Données" pour uploader le fichier if selected == "Données": st.subheader("📂 Gestion des données") fichier = st.file_uploader("Uploader un fichier CSV/Excel", type=["csv", "xlsx"]) if fichier: if fichier.name.endswith(".csv"): st.session_state.df = pd.read_csv(fichier) else: st.session_state.df = pd.read_excel(fichier) st.success("✅ Données chargées avec succès !") st.dataframe(st.session_state.df) st.download_button("⬇️ Télécharger les données", st.session_state.df.to_csv(index=False).encode("utf-8"), "donnees.csv", "text/csv") # -------- UTILISATION DU FICHIER DANS LES AUTRES PAGES -------- # # Page Taux elif selected == "Taux": if st.session_state.df is not None: st.subheader("📊 Taux d'import-substitution") produits = st.session_state.df['Produit'].unique() if 'Produit' in st.session_state.df.columns else ["Soja", "Blé", "Poisson", "Maïs"] choix_prod = st.selectbox("Choisir un produit :", produits) # Filtrer les données du produit choisi df_prod = st.session_state.df[st.session_state.df['Produit'] == choix_prod] if 'Produit' in st.session_state.df.columns else None if df_prod is not None: fig = px.line(df_prod, x="Année", y="Taux", markers=True, title=f"Évolution du taux pour {choix_prod}", line_shape="spline", color_discrete_sequence=["#27AE60"]) st.plotly_chart(fig, use_container_width=True) else: st.info("Les colonnes 'Produit', 'Année' et 'Taux' doivent être présentes dans le fichier.") else: st.warning("Veuillez d'abord uploader votre fichier de données à la page 'Données'.") # Page Analyse elif selected == "Analyse": if st.session_state.df is not None: st.subheader("📈 Analyse Dynamique") produits = st.session_state.df['Produit'].unique() if 'Produit' in st.session_state.df.columns else ["Soja", "Blé", "Poisson", "Maïs"] choix_produits = st.multiselect("Sélectionnez un ou plusieurs produits :", produits) if choix_produits: df_analyse = st.session_state.df[st.session_state.df['Produit'].isin(choix_produits)] if 'Produit' in st.session_state.df.columns else None if df_analyse is not None: fig = px.line(df_analyse, x="Année", y=["Production", "Importation"], markers=True, title=f"Production vs Importation ({', '.join(choix_produits)})", color_discrete_sequence=["#2980B9", "#E74C3C"]) st.plotly_chart(fig, use_container_width=True) else: st.info("Les colonnes 'Produit', 'Année', 'Production', 'Importation' doivent être présentes dans le fichier.") else: st.warning("Veuillez d'abord uploader votre fichier de données à la page 'Données'.") # Page Tableau de bord elif selected == "Tableau de bord": if st.session_state.df is not None: # Même logique que précédemment, mais utiliser st.session_state.df tableau_menu = option_menu( "Navigation Tableau de Bord", ["🏠 Accueil", "📊 Statistiques", "📈 Analyse Dynamique", "🌍 Carte", "⚙ Paramètres"], icons=["house", "bar-chart", "graph-up", "globe", "gear"], menu_icon="cast", default_index=0, orientation="vertical" ) df_dashboard = st.session_state.df # Utiliser les données globales pour le dashboard if tableau_menu == "📊 Statistiques": st.header("📊 Statistiques Globales") # Exemple: somme production par produit if 'Production' in df_dashboard.columns: prod_totale = df_dashboard['Production'].sum() import_totale = df_dashboard['Importation'].sum() if 'Importation' in df_dashboard.columns else 0 taux_moyen = df_dashboard['Taux'].mean() if 'Taux' in df_dashboard.columns else 0 col1, col2, col3 = st.columns(3) col1.metric("Production Locale", f"{prod_totale} T") col2.metric("Importations", f"{import_totale} T") col3.metric("Taux Substitution", f"{taux_moyen:.2f}%") else: st.warning("Veuillez d'abord uploader votre fichier de données à la page 'Données'.")











import streamlit as st from streamlit_option_menu import option_menu import pandas as pd import numpy as np import plotly.express as px import time # ---------------- CONFIGURATION ---------------- # st.set_page_config( page_title="🇨🇲 Import-Substitution Cameroun", page_icon="🌍", layout="wide", initial_sidebar_state="expanded" ) # ----------------- STYLE CSS ------------------- # st.markdown(""" <style> .main {background-color: #F9F9F9;} .stMetric { background: linear-gradient(90deg, #00C9FF 0%, #92FE9D 100%); padding: 15px; border-radius: 15px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); } .stButton>button { background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px; font-size: 16px; padding: 8px 20px; } </style> """, unsafe_allow_html=True) # ----------------- MENU HORIZONTAL ---------------- # selected = option_menu( menu_title=None, options=["Accueil", "Connexion", "Données", "Taux", "Analyse", "Rapports", "Tableau de bord", "À propos"], icons=["house", "lock", "bar-chart", "file-earmark-text", "graph-up", "file-text", "grid-3x3-gap", "info-circle"], menu_icon="cast", default_index=0, orientation="horizontal", styles={ "container": {"padding": "5px", "background-color": "#f8f9fa"}, "icon": {"color": "#2E86C1", "font-size": "20px"}, "nav-link": {"font-size": "18px", "text-align": "center", "margin": "0px", "--hover-color": "#eee"}, "nav-link-selected": {"background-color": "#2E86C1", "color": "white"}, }, ) # ----------------- PAGES ---------------- # # -------- ACCUEIL -------- # # -------- ACCUEIL -------- # if selected == "Accueil": st.markdown("<h1 style='text-align:center; color:#27AE60;'>🇨🇲 Outil d'aide à la décision - Import-substitution</h1>", unsafe_allow_html=True) #st.image("C:/Users/UltraBook 3.1/Desktop/logo enspy minepat et cameroun/enspy-logo.png", width=200) #st.image("C:/Users/UltraBook 3.1/Desktop/logo enspy minepat et cameroun/minepat-logo.png", width=200) st.image("C:/Users/UltraBook 3.1/Desktop/logo enspy minepat et cameroun/cameroun-seal.png", width=200) st.write("Bienvenue dans l’outil interactif pour mesurer la dynamique de l’import-substitution au Cameroun 🇨🇲.") # Animation chargement with st.spinner("Chargement des données..."): time.sleep(2) st.success("✅ Prêt à explorer !") # Métriques interactives col1, col2, col3 = st.columns(3) col1.metric("Production Locale", "120K T", "+12%") col2.metric("Importations", "80K T", "-8%") col3.metric("Taux Substitution", "60%", "+5%") # -------- CONNEXION -------- # elif selected == "Connexion": st.subheader("🔑 Connexion") username = st.text_input("Nom d'utilisateur") password = st.text_input("Mot de passe", type="password") if st.button("Se connecter"): if username == "RAPHAEL" and password == "1234": st.success("Connexion réussie ✅") else: st.error("Nom d'utilisateur ou mot de passe incorrect.") # -------- DONNÉES -------- # # ----------------- CHARGEMENT GLOBAL DES DONNÉES ---------------- # st.session_state.setdefault("df", None) # Initialise df dans session_state # Page "Données" pour uploader le fichier if selected == "Données": st.subheader("📂 Gestion des données") fichier = st.file_uploader("Uploader un fichier CSV/Excel", type=["csv", "xlsx"]) if fichier: if fichier.name.endswith(".csv"): st.session_state.df = pd.read_csv(fichier) else: st.session_state.df = pd.read_excel(fichier) st.success("✅ Données chargées avec succès !") st.dataframe(st.session_state.df) st.download_button("⬇️ Télécharger les données", st.session_state.df.to_csv(index=False).encode("utf-8"), "donnees.csv", "text/csv") # -------- UTILISATION DU FICHIER DANS LES AUTRES PAGES -------- # # Page Taux elif selected == "Taux": if st.session_state.df is not None: st.subheader("📊 Taux d'import-substitution") produits = st.session_state.df['Produit'].unique() if 'Produit' in st.session_state.df.columns else ["Soja", "Blé", "Poisson", "Maïs"] choix_prod = st.selectbox("Choisir un produit :", produits) # Filtrer les données du produit choisi df_prod = st.session_state.df[st.session_state.df['Produit'] == choix_prod] if 'Produit' in st.session_state.df.columns else None if df_prod is not None: fig = px.line(df_prod, x="Année", y="Taux", markers=True, title=f"Évolution du taux pour {choix_prod}", line_shape="spline", color_discrete_sequence=["#27AE60"]) st.plotly_chart(fig, use_container_width=True) else: st.info("Les colonnes 'Produit', 'Année' et 'Taux' doivent être présentes dans le fichier.") else: st.warning("Veuillez d'abord uploader votre fichier de données à la page 'Données'.") # Page Analyse elif selected == "Analyse": if st.session_state.df is not None: st.subheader("📈 Analyse Dynamique") produits = st.session_state.df['Produit'].unique() if 'Produit' in st.session_state.df.columns else ["Soja", "Blé", "Poisson", "Maïs"] choix_produits = st.multiselect("Sélectionnez un ou plusieurs produits :", produits) if choix_produits: df_analyse = st.session_state.df[st.session_state.df['Produit'].isin(choix_produits)] if 'Produit' in st.session_state.df.columns else None if df_analyse is not None: fig = px.line(df_analyse, x="Année", y=["Production", "Importation"], markers=True, title=f"Production vs Importation ({', '.join(choix_produits)})", color_discrete_sequence=["#2980B9", "#E74C3C"]) st.plotly_chart(fig, use_container_width=True) else: st.info("Les colonnes 'Produit', 'Année', 'Production', 'Importation' doivent être présentes dans le fichier.") else: st.warning("Veuillez d'abord uploader votre fichier de données à la page 'Données'.") # Page Tableau de bord elif selected == "Tableau de bord": if st.session_state.df is not None: # Même logique que précédemment, mais utiliser st.session_state.df tableau_menu = option_menu( "Navigation Tableau de Bord", ["🏠 Accueil", "📊 Statistiques", "📈 Analyse Dynamique", "🌍 Carte", "⚙ Paramètres"], icons=["house", "bar-chart", "graph-up", "globe", "gear"], menu_icon="cast", default_index=0, orientation="vertical" ) df_dashboard = st.session_state.df # Utiliser les données globales pour le dashboard if tableau_menu == "📊 Statistiques": st.header("📊 Statistiques Globales") # Exemple: somme production par produit if 'Production' in df_dashboard.columns: prod_totale = df_dashboard['Production'].sum() import_totale = df_dashboard['Importation'].sum() if 'Importation' in df_dashboard.columns else 0 taux_moyen = df_dashboard['Taux'].mean() if 'Taux' in df_dashboard.columns else 0 col1, col2, col3 = st.columns(3) col1.metric("Production Locale", f"{prod_totale} T") col2.metric("Importations", f"{import_totale} T") col3.metric("Taux Substitution", f"{taux_moyen:.2f}%") else: st.warning("Veuillez d'abord uploader votre fichier 